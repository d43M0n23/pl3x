#!/bin/bash

###################################################################################
# metapl3x.sh
# ffmpeg titel and comment metadata change script
###################################################################################
# script read all mp4 files and change title and comment metadata
# like remove "RARBG.COM - titel.mp4"
###################################################################################
#ffmpeg -i inputfile -metadata title="Movie Title" -metadata year="2010" outputfile
#ffmpeg extract Audio to mp3
#ffmpeg -i input_video.mp4 -vn -acodec mp3 output_audio.mp3
#exiftool IMG_0014.MOV >a.txt
#ffmpeg -i input_video -f ffmetadata metadata.txt
#exiftool bumsbuero.16.09.30.ashley.cumstar.de.mp4 | grep Title
# TODO:
# --rarbg --merge
# ls | awk '{ print $9 }'
# awk '$3 !~ /USA/ '
###################################################################################
# last modify: 13.11.2017
# bug or anything: d43M0n23@3xpl0it.com
###################################################################################
# Bash sTyl3!
clear='\033[0m'		#alle Attribute zurücksetzen
red='\033[31m'          #Schriftfarbe rot
green='\033[32m'        #Schriftfarbe grün
yell='\033[33m'         #Schriftfarbe gelb

#Version
version=v1.0
vdate=13.11.2017

#Variablen
owntag=core
mp4tag=mp4
mkvtag=mkv
mp3tag=mp3
wavtag=wav

#WORKING DIR
TOPDIR=`pwd`
unDone=unDone

#Directorys
x3folder_1=(1By.Day ArchAngel ATK/{ATKExotics,ATKGalleria,ATKHairy} Babes BabyGotBoobs BangingBeauties BigTitsAtSchool BoldlyGirls Brazzer BrownBunnies BumsBesuch BurningAngel)
x3folder_2=(CherryPimps DDFBusty DeviantHardcore DigitalPlayground DorcelClub FuckingAwesome FootFetishDaily GirlsDoToys GirlsWay HardTied HarmonyVision HotAndMean HotLegsAndFeet HouseOfTaboo)
x3folder_3=(InTheCrack Joymii JeshByJesh JimSlip Karups/{KarupsHA,KarupsOW,KarupsPC} Killergram KitanaLure)
x3folder_4=(Kink.com/{Kink.ElectroSluts,Kink.EverythingButt,Kink.FuckingMachines,Kink.Hog.Tied,Kink.PublicDisgrace,Kink.SexAndSubmission,Kink.TheTrainingofO,Kink.TheUpperFloor,Kink.WhippedAss})
x3folder_5=(MeganRain MilfHunter MilfsLikeItBig MommyGotBoobs MomXXX NewSensations NFBusty Nubiles Pantyhosed4U PornMegaLoad PornstarPlatinum RKPrime RoundAndBrown)
x3folder_6=(ScrewBox SexualDisgrace SexuallyBroken ShareMyBF SinsLife Spizoo TeensLoveHugeCocks TheRealWorkout VivThomas WildOnCam)

## Funktion

# Local Destination
INSTALL_DIR=/usr/share/metapl3x

#Latest release
LATEST_RELEASE=$(curl -L -s -H 'Accept: application/json' https://github.com/d43M0n23/pl3x/releases/latest)
LATEST_VERSION=$(echo $LATEST_RELEASE | sed -e 's/.*"tag_name":"\([^"]*\)".*/\1/')

#-------------
# INSTALL-PART
#-------------

if [ ! -d $INSTALL_DIR ]; then
echo -e "\n${green} + -- --=[This is your first run of the metapl3x ${clear}"
echo -e "${green} + -- --=[This script will install metapl3x under $INSTALL_DIR.${clear}"
echo -e "${green} + -- --=[After install you can use the command 'metapl3x' Server/System wide and remove the downloaded git folder${clear}"

sleep 2
mkdir -p $INSTALL_DIR 2> /dev/null
cp -Rf $PWD/* $INSTALL_DIR 2> /dev/null
rm -f /usr/bin/metapl3x
ln -s $INSTALL_DIR/metapl3x /usr/bin/metapl3x
echo -e "${green} + -- --=[Installation Finish.${clear}"
sleep 2
fi



#UPDATE NEW VERSION

if [ "$LATEST_VERSION" != "$version" ]; then
echo -e "\n${red}Your Version of metapl3x is outdated!${clear}"
echo -e "\n${green}Please use the update function: metapl3x --update!${clear}"
sleep 5
fi


#UPDATE

if [ "$1"  = "--update" ]; then
echo -e "\n${yell}You select the update Feature${clear}"
sleep 2
cd /tmp/
git clone https://github.com/d43M0n23/pl3x.git
cp -Rf pl3x/* $INSTALL_DIR 2> /dev/null
rm -f /usr/bin/metapl3x
ln -s $INSTALL_DIR/metapl3x /usr/bin/metapl3x
echo -e "\n${green}Update finish.Please restart metapl3x.${clear}"
rm -r pl3x
exit
fi


#UNINSTALL

if [ "$1" = "--uninstall" ]; then
echo -e "\n${turk}You have select the uninstall Feature${clear}"
sleep 2
rm -f /usr/bin/metapl3x
cd /usr/share/
rm -r metapl3x
cd
exit
fi


# Tools install
if ! hash exiftool 2>/dev/null; then sudo apt-get update && apt-get upgrade -y; sudo apt-get install --yes exiftool ; fi
if ! hash ffmpeg 2>/dev/null; then sudo apt-get install --yes ffmpeg ; fi

#----------------
# BANNER-FUNCTION
#----------------

sh_banner () {
echo -e "\n"
echo -e "                __                .__  ________          "
echo -e "  _____   _____/  |______  ______ |  | \_____  \___  ___ "
echo -e " /     \_/ __ \   __\__  \ \____ \|  |   _(__  <\  \/  / "
echo -e "|  Y Y  \  ___/|  |  / __ \|  |_> >  |__/       \>    <  "
echo -e "|__|_|  /\___  >__| (____  /   __/|____/______  /__/\_ \ "
echo -e "      \/     \/          \/|__|               \/      \/ "
echo -e "\n"
echo -e "                                           ${yell}Version: ${version}${clear}"
echo -e "                                       ${green}Last Stable: ${LATEST_VERSION}${clear}\n"
echo -e "${yell}Option: ${red}--check, --core, --mp3, --create${clear}"
echo -e "${yell}Option: ${red}--wav, --rarbg, --mp3 --wav, --txt${clear}"
echo -e "${yell}Option: ${red}--merge, --siterip, --sample, --help${clear}"
echo -e "${yell}Option: ${red}--elite${clear}\n"
}

#------------------
## FUNCTION SECTION
#------------------

# CHECK-META
if [ "$1" = "--check" ]; then
sh_banner;

for file in *;
do
  find "$file" -type f -not -name ".*" | grep .mp4$ | while read file
  do
#$cmd $logdir/mail.log | egrep "LOGIN.*${roaduser}" | cut -d"," -f3 2>&1 | tee ${roaduser}_${outfile}
        #exiftool $file | grep Title  | grep RARBG 2>&1 | tee -a meta.check.txt
	exiftool $file | grep Title
  done
done
exit
fi


# MERGE
if [ "$1" = "--merge" ]; then
sh_banner;

for file in *;
do
  find "$file" -type f -not -name ".*" | grep .mp4$ | while read file
  do
        pfad=$(readlink -f "$file") # kpl. Pfad
	echo "file '${pfad}'" >> input.txt
        DirPath=$pfad
        DirPath="$(dirname $DirPath)"
        DirPath="$(basename $DirPath)"
  done
done
        #merge
     #   ffmpeg -f concat -safe 0 -i input.txt -codec copy ${DirPath}.mp4
	ffmpeg -f concat -safe 0 -i input.txt -codec copy test.mp4
        rm input.txt
exit
fi

## SPECIAL PART ALL IN ONE
# CHECK-META & WORK meta
if [ "$1" = "--rarbg" ]; then
sh_banner;

for file in *;
do
  find "$file" -type f -not -name ".*" | grep .mp4$ | while read file
  do
	echo $file
	working_file=$(exiftool $file | grep Title | grep RARBG | tee -a rarbg_title.log)
	#if $working_file ; then
	pfad=$(readlink -f "$working_file") # kpl. Pfad
	DirPath=$pfad
	DirPath="$(dirname $DirPath)"
	DirPath="$(basename $DirPath)"
	echo "$DirPath"
	newtag=${DirPath%.XXX*}
	newfile=${file%.*}
	ffmpeg -i $file -c copy -metadata title="$newtag" -metadata comment="$newtag" -y ${newfile}_${owntag}.${mp4tag}
	echo $file korrigiert.
	cp $file ${file}.bka # Absicherung
	rm $file
#	fi
  done

#  find "$file" -type f -not -name ".*" | grep .mp4$ | while read file
#  do
#        newfile=${file%_core.*}
#        mv $file ${newfile}.${mp4tag}
#        echo $file verschoben.
#  done
done
exit
fi


#-----------
# ELITE PART
#-----------
if [ "$1" = "--elite" ]; then
sh_banner;
# for file in *.mp4 *.mkv (Testen)
# echo ${VALUE%.*}
# Remove TXT and Samples Dir first.
elitelog=metapl3x_elite.txt

if [ -f $elitelog ]; then
	rm $elitelog
fi
if [ -d $unDone ]; then
	mv $unDone .${unDone}
fi

# rm txt
for file in *;
do
  find "$file" -type f -not -name ".*" | grep .txt$ | grep RARBG | while read file
  do
        echo $file gefunden. - REMOVE | tee -a remove_txt.log >> $elitelog
        rm $file
  done
done

# rm samples
for file in *;
do
  find "$file" -type d -name "Sample" | while read file
  do
        pfad=$(readlink -f "$file")
        echo $file gefunden. - REMOVE | tee -a remove_txt.log >> $elitelog
        rm -r $file
  done
done

# main
for file in *;
do
  find "$file" -type f -not -name ".*" | grep .mp4$ | while read file
  do
    pfad=$(readlink -f "$file") # kpl. Pfad
        DirPath=$pfad
        DirPath="$(dirname $DirPath)"
        DirPath="$(basename $DirPath)"
        echo -e "${green}Fileordner:${yell} ${DirPath}${clear}"
        #mainfolder section
	mainfolder=${DirPath%%.*}
	echo -e "${green}Mainfolder:${yell} ${mainfolder}${clear}"
	#file metapart
        newtag=${DirPath%.XXX*}
        newfile=${file%.*}
        ffmpeg -i $file -c copy -metadata title="$newtag" -metadata comment="$newtag" -y ${newfile}_${owntag}.${mp4tag}
        echo -e "\n${green}${file} korrigiert.${clear}"
	#cp $file ${file}.bka # Absicherung
        rm $file
	#remove coreTag in filename
        topfile=${newfile}.${mp4tag}
        mv ${newfile}_${owntag}.${mp4tag} ${topfile}
        echo ${newfile}_${owntag}.${mp4tag} verschoben zu $topfile.
	#move sub 2 main folder
	if [ ! -d $mainfolder ]; then
	mkdir $mainfolder
	fi
	mv $DirPath $TOPDIR/$mainfolder/
	echo $DirPath in den $mainfolder verschoben.
  done
done
#cat remove_txt.log >> $elitelog
#cat remove_sample.log >> $elitelog
if [ -d ".$unDone" ]; then
        mv .${unDone} $unDone
fi
exit
fi

## REMOVE PART
# REMOVE CORE STRING
if [ "$1" = "--core" ]; then
sh_banner;

for file in *;
do
  find "$file" -type f -not -name ".*" | grep .mp4$ | grep core | while read file
  do
	newfile=${file%_core.*}
	mv $file ${newfile}.${mp4tag}
        echo $file korrigiert.
  done
done
exit
fi

# REMOVE - TXT Files
if [ "$1" = "--txt" ]; then
sh_banner;

for file in *;
do
  find "$file" -type f -not -name ".*" | grep .txt$ | grep RARBG | while read file
  do
	echo $file >> remove_txt.log
	echo $file gefunden. - REMOVE
	rm $file
  done
done
exit
fi

# REMOVE - SAMPLE DIR
if [ "$1" = "--sample" ]; then
sh_banner;

for file in *;
do
  find "$file" -type d -name "Sample" | while read file
  do
	pfad=$(readlink -f "$file")
	echo $file >> remove_sample.log
        echo $file gefunden. - REMOVE
	rm -r $file
  done
done
exit
fi

## AUDIO CONVERT PART

# Extract Audio from mkv
if [ "$1" = "--mp3" ]; then
sh_banner;

for file in *;
do
  find "$file" -type f -not -name ".*" | egrep '.mkv$|.mp4$' | while read file
  do
    pfad=$(readlink -f "$file") # kpl. Pfad
        DirPath=$pfad
        DirPath="$(dirname $DirPath)"
        DirPath="$(basename $DirPath)"
        echo "$DirPath"
        newtag=${DirPath%.German*}
        newfile=${file%.*}
	# Extract MP3
	ffmpeg -i $file -vn -acodec mp3 ${newfile}.${mp3tag}
        echo Aus $file Audio extrahiert.
        if [ "$2" = "--wav" ]; then
        pfad=$(readlink -f "$file") # kpl. Pfad
                DirPath=$pfad
                DirPath="$(dirname $DirPath)"
                DirPath="$(basename $DirPath)"
                echo "$DirPath"
                newtag=${DirPath%.German*}
                newfile=${file%.*}
                # Convert 2 WAV
                ffmpeg -i $file ${newfile}.${wavtag}
                echo $file wurder in ${newfile}.${wavtag} konvertiert.
        fi
 done
done
exit
fi

# convert mp3 to wav
# ffmpeg -i *.mp3 *.wav
if [ "$1" = "--wav" ]; then
sh_banner;

for file in *;
do
  find "$file" -type f -not -name ".*" | grep .mp3$ | while read file
  do
    pfad=$(readlink -f "$file") # kpl. Pfad
        DirPath=$pfad
        DirPath="$(dirname $DirPath)"
        DirPath="$(basename $DirPath)"
        echo "$DirPath"
        newtag=${DirPath%.German*}
        newfile=${file%.*}
        # Extract MP3
        ffmpeg -i $file ${newfile}.${wavtag}
        echo $file wurder in ${newfile}.${wavtag} konvertiert.
  done
done
exit
fi

## FOLDER PART

# create xxx-folder
if [ "$1" = "--create" ]; then
	sh_banner;
	echo "creating Folder in Source"
	mkdir -p ${x3folder_1[*]} ${x3folder_2[*]} ${x3folder_3[*]} ${x3folder_4[*]} ${x3folder_5[*]} ${x3folder_6[*]};
	exit;
fi

# move sync to sitetip
if [ "$1" = "--siterip" ]; then
	sh_banner;
	echo "Moving Files to Siterip"
        exit;
fi

#----------------
# HELP
#----------------
sh_help () {
cat << !
---
-- Author: d43M0n23-3xp10it | c0r3-Team @2017
-- Supported: Linux Kali, Ubuntu, Mint, Parrot OS
---

   metapl3x help function:
   --check	: Prüft die Metadaten der Videodatei
   --core	: Entfernt in den Filenames das wort _core
   --mp3	: Extrahiert aus MP4/MKV eine mp3 datei
   --create	: Erstellt diverse XXX Folder
   --wav	: Extrahiert aus MP4/MKV eine wav datei
   --rarbg	: Bearbeitet nur Datein mit RARBG Tag im Titel
   --mp3 --wav	: Extrahiert automatisch mp3 und wav aus Videofiles
   --txt	: Löscht alle *.txt aus den Video Foldern
   --merge	: Kombiniert 2 Video Dateien
   --siterip	: Verschiebt alle Video Files von Sync zu SiteRip:infinity
   --sample	: Löscht alle Sample Files und Ordner
   --help	: Diese Anzeige
   --elite	: Löscht *txt und Sample,Konvertiert Meta und verschiebt in Mainfolder

!
   exit
}

# move sync to sitetip
if [ "$1" = "--help" ]; then
        sh_banner;
        sh_help;
        exit;
fi


#----------------
# MAIN-PART
#----------------
sh_banner;

#for file in *.mp4 *.mkv (Testen)
# echo ${VALUE%.*}
for file in *;
do
  find "$file" -type f -not -name ".*" | grep .mp4$ | while read file
  do
    pfad=$(readlink -f "$file") # kpl. Pfad
	DirPath=$pfad
	DirPath="$(dirname $DirPath)"
	DirPath="$(basename $DirPath)"
	echo "$DirPath"
	newtag=${DirPath%.XXX*}
	newfile=${file%.*}
	ffmpeg -i $file -c copy -metadata title="$newtag" -metadata comment="$newtag" -y ${newfile}_${owntag}.${mp4tag}
	echo $file korrigiert.
#	cp $file ${file}.bka # Absicherung
	rm $file
  done
  find "$file" -type f -not -name ".*" | grep .mp4$ | while read file
  do
        newfile=${file%_core.*}
        mv $file ${newfile}.${mp4tag}
        echo $file verschoben.
   done
done
