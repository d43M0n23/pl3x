#!/bin/bash

###################################################################################
# metapl3x.sh
# ffmpeg titel and comment metadata change script
###################################################################################
# script read all mp4 files and change title and comment metadata
# like remove "RARBG.COM - titel.mp4"
###################################################################################
#ffmpeg -i inputfile -metadata title="Movie Title" -metadata year="2010" outputfile
#ffmpeg extract Audio to mp3
#ffmpeg -i input_video.mp4 -vn -acodec mp3 output_audio.mp3
#exiftool IMG_0014.MOV >a.txt
#ffmpeg -i input_video -f ffmetadata metadata.txt
#exiftool bumsbuero.16.09.30.ashley.cumstar.de.mp4 | grep Title
# WMV 2 MP4
# ffmpeg -i input.wmv -c:v libx264 -crf 23 -c:a aac -q:a 100 output.mp4
#
# TODO:
# --rarbg --merge
# ls | awk '{ print $9 }'
# awk '$3 !~ /USA/ '
# find . -type f -name "*.mkv" -exec bash -c 'FILE="$1"; ffmpeg -i "${FILE}" -vn -c:a libmp3lame -y "${FILE%.mkv}.mp3";' _ '{}' \;    (MKV 2 MP3 inc subfolder)
# sed -e 's/\./ /g'  (punkte gegen leerzeichen)
###################################################################################
# last modify: 14.01.2021
# bug or anything: d43M0n23@3xpl0it.com
###################################################################################
# Bash sTyl3!
clear='\033[0m'		#alle Attribute zurücksetzen
red='\033[31m'          #Schriftfarbe rot
green='\033[32m'        #Schriftfarbe grün
yell='\033[33m'         #Schriftfarbe gelb
blue='\033[34m'         #Schriftfarbe blau
mag='\033[35m'          #Schriftfarbe magenta
turk='\033[36m'         #Schriftfarbe türkis
orange='\033[93m'	#Schriftfarbe orange
dlila='\033[0;35m'	#Schriftfarbe dunkellila
hlila='\033[1;35m'	#Schriftfarbe helllila

#Version
version=v1.2
vdate=02.11.2021

#File.Format
owntag=core
mp4tag=mp4
mkvtag=mkv
mp3tag=mp3
wavtag=wav

#WORKING DIR
TOPDIR=`pwd`
unDone=unDone

#Directorys
x3folder_1=(1By.Day ArchAngel ATK/{ATKExotics,ATKGalleria,ATKHairy} Babes BabyGotBoobs BangingBeauties BigTitsAtSchool BoldlyGirls Brazzer BrownBunnies BumsBesuch BurningAngel)
x3folder_2=(CherryPimps DDFBusty DeviantHardcore DigitalPlayground DorcelClub FuckingAwesome FootFetishDaily GirlsDoToys GirlsWay HardTied HarmonyVision HotAndMean HotLegsAndFeet HouseOfTaboo)
x3folder_3=(InTheCrack Joymii JeshByJesh JimSlip Karups/{KarupsHA,KarupsOW,KarupsPC} Killergram KitanaLure)
x3folder_4=(Kink.com/{Kink.ElectroSluts,Kink.EverythingButt,Kink.FuckingMachines,Kink.Hog.Tied,Kink.PublicDisgrace,Kink.SexAndSubmission,Kink.TheTrainingofO,Kink.TheUpperFloor,Kink.WhippedAss})
x3folder_5=(MeganRain MilfHunter MilfsLikeItBig MommyGotBoobs MomXXX NewSensations NFBusty Nubiles Pantyhosed4U PornMegaLoad PornstarPlatinum RKPrime RoundAndBrown)
x3folder_6=(ScrewBox SexualDisgrace SexuallyBroken ShareMyBF SinsLife Spizoo TeensLoveHugeCocks TheRealWorkout VivThomas WildOnCam)

## Funktion

# Local Destination
INSTALL_DIR=/usr/share/metapl3x

#Latest release
LATEST_RELEASE=$(curl -L -s -H 'Accept: application/json' https://github.com/d43M0n23/pl3x/releases/latest)
LATEST_VERSION=$(echo $LATEST_RELEASE | sed -e 's/.*"tag_name":"\([^"]*\)".*/\1/')

#-------------
# INSTALL-PART
#-------------

if [ ! -d $INSTALL_DIR ]; then
echo -e "\n${green} + -- --=[This is your first run of the metapl3x ${clear}"
echo -e "${green} + -- --=[This script will install metapl3x under $INSTALL_DIR.${clear}"
echo -e "${green} + -- --=[After install you can use the command 'metapl3x' Server/System wide and remove the downloaded git folder${clear}"

sleep 2
mkdir -p $INSTALL_DIR 2> /dev/null
cp -Rf $PWD/* $INSTALL_DIR 2> /dev/null
rm -f /usr/bin/metapl3x
ln -s $INSTALL_DIR/metapl3x /usr/bin/metapl3x
echo -e "${green} + -- --=[Installation Finish.${clear}"
sleep 2
fi



#UPDATE NEW VERSION

if [ "$LATEST_VERSION" != "$version" ]; then
echo -e "\n${red}Your Version of metapl3x is outdated!${clear}"
echo -e "\n${green}Please use the update function: metapl3x --update!${clear}"
sleep 5
fi


#UPDATE

if [ "$1"  = "--update" ]; then
echo -e "\n${yell}You select the update Feature${clear}"
sleep 2
cd /tmp/
git clone https://github.com/d43M0n23/pl3x.git
cp -Rf pl3x/* $INSTALL_DIR 2> /dev/null
rm -f /usr/bin/metapl3x
ln -s $INSTALL_DIR/metapl3x /usr/bin/metapl3x
echo -e "\n${green}Update finish.Please restart metapl3x.${clear}"
rm -r pl3x
exit
fi


#UNINSTALL

if [ "$1" = "--uninstall" ]; then
echo -e "\n${turk}You have select the uninstall Feature${clear}"
sleep 2
rm -f /usr/bin/metapl3x
cd /usr/share/
rm -r metapl3x
cd
exit
fi


# Tools install
if ! hash exiftool 2>/dev/null; then sudo apt-get update && apt-get upgrade -y; sudo apt-get install --yes exiftool ; fi
if ! hash ffmpeg 2>/dev/null; then sudo apt-get install --yes ffmpeg ; fi

#----------------
# BANNER-FUNCTION
#----------------

sh_banner () {
echo -e "\n"
echo -e "                __                .__  ________          "
echo -e "  _____   _____/  |______  ______ |  | \_____  \___  ___ "
echo -e " /     \_/ __ \   __\__  \ \____ \|  |   _(__  <\  \/  / "
echo -e "|  Y Y  \  ___/|  |  / __ \|  |_> >  |__/       \>    <  "
echo -e "|__|_|  /\___  >__| (____  /   __/|____/______  /__/\_ \ "
echo -e "      \/     \/          \/|__|               \/      \/ "
echo -e "\n"
echo -e "                                           ${yell}Version: ${version}${clear}"
echo -e "                                       ${green}Last Stable: ${LATEST_VERSION}${clear}"
echo -e "                                         c0d3R: d43M0n23\n"
echo -e "${yell}OPTIONS: ${clear}\n"
echo -e "${yell}Information: ${red}--check, --core${clear}"
echo -e "${yell}RARGB: ${red}--elite${clear}"
echo -e "${yell}Folder: ${red}--create${clear}"
echo -e "${yell}Sound: ${red} --mp3, --wav, --rarbg, --mp3 --wav, --txt${clear}"
echo -e "${yell}Edit: ${red}--merge, --siterip, --sample${clear}"
echo -e "${yell}VR: ${red}--vr-mobile, --vr180${clear}"
echo -e "${yell}Name: ${red}--elitename, --rename, --name, --lowname, --filename${clear}"
echo -e "${yell}VLC-List: ${red}--vlc${clear}"
echo -e "${yell}Meta Artist: ${red}--meta${clear}"
echo -e "${yell}Help: ${red}--help${clear}\n"

}

#----------------
# HELP
#----------------
sh_help () {
cat << !
---
-- Author: d43M0n23-3xpl0it | c0r3-Team @2021
-- Supported: Linux Kali, Debian, Ubuntu
---

   metapl3x help function:

   Information:
   --check      : Prüft die Metadaten der Videodatei

   Master:
   --elite      : Löscht *txt und Sample,Konvertiert Meta und verschiebt in Mainfolder

   Remove:
   --core       : Entfernt in den Filenames das wort _core
   --txt        : Löscht alle *.txt aus den Video Foldern
   --sample     : Löscht alle Sample Files und Ordner

   Sound:
   --mp3        : Extrahiert aus MP4/MKV eine mp3 datei
   --wav        : Extrahiert aus MP4/MKV eine wav datei
   --mp3 --wav  : Extrahiert automatisch mp3 und wav aus Videofiles

   VR:
   --vr-mobile  : Konvertiert VR 5400 zu VR 2040 Res
   --vr180      : Konvertiert VR360 zu VR180

   Folder:
   --create     : Erstellt diverse XXX Folder

   Tag Rename:
   --rarbg      : Bearbeitet nur Datein mit RARBG Tag im Titel

   Sync-Dev:
   --siterip    : Verschiebt alle Video Files von Sync zu SiteRip:infinity

   Dev:
   --merge      : Kombiniert 2 Video Dateien

   Help:
   --help       : Diese Anzeige
!
   exit
}

#------------------
## FUNCTION SECTION
#------------------

# CHECK-Filename
if [ "$1" = "--filename" ]; then
sh_banner;

for file in *;
do
  find "$file" -type f -not -name ".*" | grep .mp4$ | while read file
  do

	echo $file | tee -a filename.check.txt
  done
done
exit
fi

# CHECK-META
if [ "$1" = "--check" ]; then
sh_banner;

for file in *;
do
  find "$file" -type f -not -name ".*" | grep .mp4$ | while read file
  do
#$cmd $logdir/mail.log | egrep "LOGIN.*${roaduser}" | cut -d"," -f3 2>&1 | tee ${roaduser}_${outfile}
        #exiftool $file | grep Title  | grep RARBG 2>&1 | tee -a meta.check.txt
	exiftool $file | grep Title
  done
done
exit
fi


# MERGE
if [ "$1" = "--merge" ]; then
sh_banner;

for file in *;
do
  find "$file" -type f -not -name ".*" | grep .mp4$ | while read file
  do
        pfad=$(readlink -f "$file") # kpl. Pfad
	echo "file '${pfad}'" >> input.txt
        DirPath=$pfad
        DirPath="$(dirname $DirPath)"
        DirPath="$(basename $DirPath)"
  done
done
        #merge
     #   ffmpeg -f concat -safe 0 -i input.txt -codec copy ${DirPath}.mp4
	ffmpeg -f concat -safe 0 -i input.txt -codec copy test.mp4
        rm input.txt
exit
fi

## SPECIAL PART ALL IN ONE
# CHECK-META & WORK meta
if [ "$1" = "--rarbg" ]; then
sh_banner;
rarbglog=remove_rarbg.log
if [ -f $rarbglog ]; then
	rm $rarbglog
fi


for file in *;
do
  find "$file" -type f -not -name ".*" | grep .mp4$ | while read file
  do
	working_file=$(exiftool $file | grep Title | grep RARBG | tee -a rarbg_title.log)
	echo $working_file
	#! -z "$var"
	if [ ! -z  "$working_file" ] ; then
	pfad=$(readlink -f "$file") # kpl. Pfad
	DirPath=$pfad
	DirPath="$(dirname $DirPath)"
	DirPath="$(basename $DirPath)"
	echo "$DirPath"
	newtag=${DirPath%.XXX*}
	newfile=${file%.*}
	ffmpeg -i $file -c copy -metadata title="$newtag" -metadata comment="$newtag" -y ${newfile}_${owntag}.${mp4tag}
	echo $file korrigiert.
	rm $file
        #remove coreTag in filename
        topfile=${newfile}.${mp4tag}
        mv ${newfile}_${owntag}.${mp4tag} ${topfile}
        echo ${newfile}_${owntag}.${mp4tag} verschoben zu $topfile.
	fi
  done
done
exit
fi
#
# Modify Meta Artist 4 Plex Filter
#
if [ "$1" = "--meta" ]; then
sh_banner;
rarbglog=remove_rarbg.log
if [ -f $rarbglog ]; then
        rm $rarbglog
fi


for file in *;
do
  find "$file" -type f -not -name ".*" | grep .mp4$ | while read file
  do
        working_file=$(exiftool $file | grep Title | grep RARBG | tee -a rarbg_title.log)
        echo $working_file
        #! -z "$var"
        if [ ! -z  "$working_file" ] ; then
        pfad=$(readlink -f "$file") # kpl. Pfad
        DirPath=$pfad
        DirPath="$(dirname $DirPath)"
        DirPath="$(basename $DirPath)"
        echo "$DirPath"
        newtag=${DirPath%.XXX*}
        newfile=${file%.*}
        ffmpeg -i $file -c copy -metadata title="$newtag" -metadata comment="$newtag" -y ${newfile}_${owntag}.${mp4tag}
        echo $file korrigiert.
        rm $file
        #remove coreTag in filename
        topfile=${newfile}.${mp4tag}
        mv ${newfile}_${owntag}.${mp4tag} ${topfile}
        echo ${newfile}_${owntag}.${mp4tag} verschoben zu $topfile.
        fi
  done
done
exit
fi



# Name-Ordnername wird zu Name

#dir="/from/here/to/there.txt"
#dir="$(dirname $dir)"   # Returns "/from/here/to"
#dir="$(basename $dir)"  # Returns just "to"

#basename `dirname "/from/here/to/there.txt"`
#In order to get any part of your path you could do:
#echo "/from/here/to/there.txt" | awk -F/ '{ print $2 }'
#OR
#echo "/from/here/to/there.txt" | awk -F/ '{ print $3 }'
#OR
#  | awk -F/ '{ print $7 }'

if [ "$1" = "--elitename" ]; then
sh_banner;
rarbglog=name.log
if [ -f $rarbglog ]; then
        rm $rarbglog
fi


for file in *;
do
  find "$file" -type f -not -name ".*" | grep .mp4$ | while read file
  do
        pfad=$(readlink -f "$file") # kpl. Pfad
        DirPath=$pfad
	mainfolder=$(echo $pfad | awk -F/ '{ print $7 }')
        DirPath="$(dirname $DirPath)"
        DirPath="$(basename $DirPath)"
        newtag=${DirPath%.XXX*}
        echo  NEWTAG/DIRPATH CUT ${newtag}
        newfile=${file%.*}
        echo  FileCUT ${newfile}
        newfile=${newfile#*/}
        topfile=${newtag}.${mp4tag}
#	mainfolder=$("$echo $pfad | awk -F/ '{ print $3 }'")

       if [ "$newfile" != "$newtag" ] ; then
#        mv ${file} ${mainfolder}/${DirPath}/${topfile}
        echo ${newfile} unbennant zu $topfile | tee -a rename.log
	echo $mainfolder | tee -a rename.log
       fi
  done
done
exit
fi

##############################

if [ "$1" = "--name" ]; then
sh_banner;
rarbglog=name.log
if [ -f $rarbglog ]; then
        rm $rarbglog
fi


for file in *;
do
  find "$file" -type f -not -name ".*" | grep .mp4$ | while read file
  do
        pfad=$(readlink -f "$file") # kpl. Pfad
        DirPath=$pfad
        DirPath="$(dirname $DirPath)"
        DirPath="$(basename $DirPath)"
        newtag=${DirPath%.XXX*}
	echo  NEWTAG/DIRPATH CUT ${newtag}
        newfile=${file%.*}
	echo  FileCUT ${newfile}
	newfile=${newfile#*/}
        topfile=${newtag}.${mp4tag}

       if [ "$newfile" != "$newtag" ] ; then
	mv ${file} ${DirPath}/${topfile}
	if [ "$2" = "--lower" ]; then
	mv ${DirPath}/${topfile} ${DirPath}/${topfile,,}
	fi

	echo ${newfile} unbennant zu $topfile | tee -a rename.log
       fi
  done
done
exit
fi


## move 2 lower
# Name-Ordnername wird zu Name
if [ "$1" = "--lower" ]; then
sh_banner;
rarbglog=name.log
if [ -f $rarbglog ]; then
        rm $rarbglog
fi


for file in *;
do
  find "$file" -type f -not -name ".*" | grep .mp4$ | while read file
  do
        pfad=$(readlink -f "$file") # kpl. Pfad
        DirPath=$pfad
        DirPath="$(dirname $DirPath)"
        DirPath="$(basename $DirPath)"
        newtag=${DirPath%.XXX*}
        echo  NEWTAG/DIRPATH CUT ${newtag}
        newfile=${file%.*}
        echo  FileCUT ${newfile}
        newfile=${newfile#*/}
        topfile=${newfile}.${mp4tag}
	#mv ${file} ${DirPath}/${topfile}
        mv $file ${DirPath}/${topfile,,}

        echo ${file} unbennant zu $topfile 
  done
done
exit
fi


######################
####RENAME
##########
# Neuer name wird gesetzt
if [ "$1" = "--rename" ]; then
sh_banner;
rarbglog=rename.log
if [ -f $rarbglog ]; then
        rm $rarbglog
fi


for file in *;
do
  find "$file" -type f -not -name ".*" | grep .mp4$ | while read file
  do
        pfad=$(readlink -f "$file") # kpl. Pfad
        DirPath=$pfad
        DirPath="$(dirname $DirPath)"
        DirPath="$(basename $DirPath)"
        newtag=${DirPath%.XXX*}
        #BigNaturals.20.02.03.Indica.Flower.The.Right.Fit.XXX.1080p.MP4-KTR[rarbg]
	echo  NEWTAG/DIRPATHCUT Bei XXX ${newtag}
        newfile=${file%.*}
	newfile=${newfile#*/}
        echo  FileCUT - keine Endung ${newfile}
        #bignaturals.20.02.03.indica.flower.the.right.fit [.mp4]
        newfile=${newfile#*.}
	echo Ohne Hoster: $newfile
	sleep 3
	echo LOWERCASE: "${newfile,,}"
        #20.02.03.indica.flower.the.right.fit
        lable="$2"
	echo $lable
	sleep 3
        topfile=${lable}.${newfile}.${mp4tag}
	echo Topfile... Finaler Name $topfile
	sleep 3
        #rename filename
     #  if [ "$newfile" != "$newtag" ] ; then
        mv ${file} ${DirPath}/${topfile}
        echo ${newfile} unbennant zu $topfile | tee -a rename.log
     #  fi
  done
done
exit
fi


#-----------
# ELITE PART
#-----------
if [ "$1" = "--elite" ]; then
sh_banner;
# for file in *.mp4 *.mkv (Testen)
# echo ${VALUE%.*}
# Remove TXT and Samples Dir first.
elitelog=metapl3x_elite.txt

if [ -f $elitelog ]; then
	rm $elitelog
fi
if [ -d $unDone ]; then
	mv $unDone .${unDone}
fi

# rm txt
for file in *;
do
  find "$file" -type f -not -name ".*" | grep .txt$ | grep RARBG | while read file
  do
        echo $file gefunden. - REMOVE | tee -a remove_txt.log >> $elitelog
        rm $file
  done
done

# rm nfo
for file in *;
do
  find "$file" -type f -not -name ".*" | grep .nfo$ | while read file
  do
        echo $file gefunden. - REMOVE | tee -a remove_txt.log >> $elitelog
        rm $file
  done
done

# rm samples
for file in *;
do
  find "$file" -type d -name "Sample" | while read file
  do
        pfad=$(readlink -f "$file")
        echo $file gefunden. - REMOVE | tee -a remove_txt.log >> $elitelog
        rm -r $file
  done
done

# Mirror.exe
for file in *;
do
  find "$file" -type f -not -name ".*" | grep .exe$ | grep RARBG | while read file
  do
        echo $file gefunden. - REMOVE | tee -a remove_txt.log >> $elitelog
        rm $file
  done
done


# main
for file in *;
do
  find "$file" -type f -not -name ".*" | grep .mp4$ | while read file
  do
    pfad=$(readlink -f "$file") # kpl. Pfad
        DirPath=$pfad
        DirPath="$(dirname $DirPath)"
        DirPath="$(basename $DirPath)"
        echo -e "${green}Fileordner:${yell} ${DirPath}${clear}"
        #mainfolder section
	mainfolder=${DirPath%%.*}
	echo -e "${green}Mainfolder:${yell} ${mainfolder}${clear}"
	#file metapart
        newtag=${DirPath%.XXX*}
        newfile=${file%.*}
	#Hier wird gleich richtig Renamed !!
#	newfile=${newfile#*/}
        ffmpeg -i $file -c copy -metadata title="$newtag" -metadata comment="$newtag" -y ${newfile}_${owntag}.${mp4tag}
        echo -e "\n${green}${file} korrigiert.${clear}"
	#cp $file ${file}.bka # Absicherung
        rm $file
	#remove coreTag in filename
        topfile=${newfile}.${mp4tag}
        mv ${newfile}_${owntag}.${mp4tag} ${topfile}
        echo ${newfile}_${owntag}.${mp4tag} verschoben zu $topfile.
	#move sub 2 main folder
	if [ ! -d $mainfolder ]; then
	mkdir $mainfolder
	fi
	mv $DirPath $TOPDIR/$mainfolder/
	echo $DirPath in den $mainfolder verschoben.
  done
done
#cat remove_txt.log >> $elitelog
#cat remove_sample.log >> $elitelog
if [ -d ".$unDone" ]; then
        mv .${unDone} $unDone
fi
exit
fi

## REMOVE PART
# REMOVE CORE STRING
if [ "$1" = "--core" ]; then
sh_banner;

for file in *;
do
  find "$file" -type f -not -name ".*" | grep .mp4$ | grep core | while read file
  do
	newfile=${file%_core.*}
	mv $file ${newfile}.${mp4tag}
        echo $file korrigiert.
  done
done
exit
fi

# REMOVE - TXT Files
if [ "$1" = "--txt" ]; then
sh_banner;

for file in *;
do
  find "$file" -type f -not -name ".*" | grep .txt$ | grep RARBG | while read file
  do
	echo $file >> remove_txt.log
	echo $file gefunden. - REMOVE
	rm $file
  done
done
exit
fi

# REMOVE - SAMPLE DIR
if [ "$1" = "--sample" ]; then
sh_banner;

for file in *;
do
  find "$file" -type d -name "Sample" | while read file
  do
	pfad=$(readlink -f "$file")
	echo $file >> remove_sample.log
        echo $file gefunden. - REMOVE
	rm -r $file
  done
done
exit
fi

## AUDIO CONVERT PART

# Extract Audio from mkv
if [ "$1" = "--mp3" ]; then
sh_banner;

for file in *;
do
  find "$file" -type f -not -name ".*" | egrep '.mkv$|.mp4$' | while read file
  do
    pfad=$(readlink -f "$file") # kpl. Pfad
        DirPath=$pfad
        DirPath="$(dirname $DirPath)"
        DirPath="$(basename $DirPath)"
        echo "$DirPath"
        newtag=${DirPath%.German*}
        newfile=${file%.*}
	# Extract MP3
	ffmpeg -i $file -vn -acodec mp3 ${newfile}.${mp3tag}
        echo Aus $file Audio extrahiert.
        if [ "$2" = "--wav" ]; then
        pfad=$(readlink -f "$file") # kpl. Pfad
                DirPath=$pfad
                DirPath="$(dirname $DirPath)"
                DirPath="$(basename $DirPath)"
                echo "$DirPath"
                newtag=${DirPath%.German*}
                newfile=${file%.*}
                # Convert 2 WAV
                ffmpeg -i $file ${newfile}.${wavtag}
                echo $file wurder in ${newfile}.${wavtag} konvertiert.
        fi
 done
done
exit
fi

# convert mp3 to wav
# ffmpeg -i *.mp3 *.wav
if [ "$1" = "--wav" ]; then
sh_banner;

for file in *;
do
  find "$file" -type f -not -name ".*" | grep .mp3$ | while read file
  do
    pfad=$(readlink -f "$file") # kpl. Pfad
        DirPath=$pfad
        DirPath="$(dirname $DirPath)"
        DirPath="$(basename $DirPath)"
        echo "$DirPath"
        newtag=${DirPath%.German*}
        newfile=${file%.*}
        # Extract MP3
        ffmpeg -i $file ${newfile}.${wavtag}
        echo $file wurder in ${newfile}.${wavtag} konvertiert.
  done
done
exit
fi

## VR PART
## --vr-mobile
if [ "$1" = "--vr-mobile" ]; then
sh_banner;

for file in *;
do
  find "$file" -type f -not -name ".*" | grep .mp4$ | while read file
  do
    pfad=$(readlink -f "$file") # kpl. Pfad
        DirPath=$pfad
        DirPath="$(dirname $DirPath)"
        DirPath="$(basename $DirPath)"
        echo -e "${green}Fileordner:${yell} ${DirPath}${clear}"
        #mainfolder section
        mainfolder=${DirPath%%.*}
        echo -e "${green}Mainfolder:${yell} ${mainfolder}${clear}"
        #file metapart
        newtag=${DirPath%.XXX*}
        newfile=${file%.*}
	ffmpeg -i $file -vf scale=2080x1040,setsar=1:1 -preset fast -profile:v main -crf 17 ${newfile}_2k.${mp4tag}
	 echo -e "\n${green}${file} konvertiert auf 2k Mobile.${clear}"
       # mv $DirPath $TOPDIR/$mainfolder/
       # echo $DirPath in den $mainfolder verschoben.
  done
done
exit
fi

## --vr180
if [ "$1" = "--vr180" ]; then
sh_banner;

for file in *;
do
  find "$file" -type f -not -name ".*" | grep .mp4$ | while read file
  do
    pfad=$(readlink -f "$file") # kpl. Pfad
        DirPath=$pfad
        DirPath="$(dirname $DirPath)"
        DirPath="$(basename $DirPath)"
        echo -e "${green}Fileordner:${yell} ${DirPath}${clear}"
        #mainfolder section
        mainfolder=${DirPath%%.*}
        echo -e "${green}Mainfolder:${yell} ${mainfolder}${clear}"
        #file metapart
        newtag=${DirPath%.XXX*}
        newfile=${file%.*}
        ffmpeg -i $file -c:v libx264 -preset fast -crf 17 -vf "stereo3d=abl:sbsl,scale=4320x1080" -c:a copy ${newfile}_180.${mp4tag}
         echo -e "\n${green}${file} konvertiert auf VR-180.${clear}"
       # mv $DirPath $TOPDIR/$mainfolder/
       # echo $DirPath in den $mainfolder verschoben.
  done
done
exit
fi


## FOLDER PART

# create xxx-folder
if [ "$1" = "--create" ]; then
	sh_banner;
	echo "creating Folder in Source"
	mkdir -p ${x3folder_1[*]} ${x3folder_2[*]} ${x3folder_3[*]} ${x3folder_4[*]} ${x3folder_5[*]} ${x3folder_6[*]};
	exit;
fi

# move sync to sitetip
if [ "$1" = "--siterip" ]; then
	sh_banner;
	echo "Moving Files to Siterip"
        exit;
fi

# move sync to sitetip
if [ "$1" = "--help" ]; then
        sh_banner;
        sh_help;
        exit;
fi


#VLC Playlist Replace
#change NFS Z mount to local mount linux
if [ "$1" = "--vlc" ]; then
	sh_banner;
	sed -i 's!file:///Z:/03-Adult/!file:///home/infinity/03-Adult/!g' *.xspf
	exit;
fi




#----------------
# BASIC-PART
#----------------
sh_banner;

#for file in *.mp4 *.mkv (Testen)
# echo ${VALUE%.*}


#for file in *;
#do
#  find "$file" -type f -not -name ".*" | grep .mp4$ | while read file
#  do
#    pfad=$(readlink -f "$file") # kpl. Pfad
#	DirPath=$pfad
#	DirPath="$(dirname $DirPath)"
#	DirPath="$(basename $DirPath)"
#	echo "$DirPath"
#	newtag=${DirPath%.XXX*}
#	newfile=${file%.*}
#	ffmpeg -i $file -c copy -metadata title="$newtag" -metadata comment="$newtag" -y ${newfile}_${owntag}.${mp4tag}
#	echo $file korrigiert.
##	cp $file ${file}.bka # Absicherung
#	rm $file
#  done
#  find "$file" -type f -not -name ".*" | grep .mp4$ | while read file
#  do
#        newfile=${file%_core.*}
#        mv $file ${newfile}.${mp4tag}
#        echo $file verschoben.
#   done
#done
