#!/bin/bash

###################################################################################
# metapl3x.sh
# ffmpeg titel and comment metadata change script
###################################################################################
# script read all mp4 files and change title and comment metadata
# like remove "RARBG.COM - titel.mp4"
###################################################################################
#ffmpeg -i inputfile -metadata title="Movie Title" -metadata year="2010" outputfile
#ffmpeg extract Audio to mp3
#ffmpeg -i input_video.mp4 -vn -acodec mp3 output_audio.mp3
#exiftool IMG_0014.MOV >a.txt
#ffmpeg -i input_video -f ffmetadata metadata.txt
#exiftool bumsbuero.16.09.30.ashley.cumstar.de.mp4 | grep Title
###################################################################################
# last modify: 04.07.2017
# bug or anything: d43M0n23@3xpl0it.com
###################################################################################
# Bash sTyl3!
clear='\033[0m'		#alle Attribute zurücksetzen
red='\033[31m'          #Schriftfarbe rot
green='\033[32m'        #Schriftfarbe grün
yell='\033[33m'         #Schriftfarbe gelb

#Version
version=v1.0
vdate=06.11.2017

#Variablen
owntag=core
mp4tag=mp4
mkvtag=mkv

#Directorys
x3folder_1=(1By-Day ATK BabyGotBoobs BigTitsAtWork BigTitsAtSchool BoldlyGirls BumsBesuch BumsBuero BurningAngel)
x3folder_2=(CherryPimps DDFBusty DeviantHardcore DigitalPlayground DorcelClub FootFetishDaily GirlsDoToys GirlsWay)
x3folder_3=(HarmonyVision HotAndMean HotLegsAndFeet HouseOfTaboo InTheCrack Killergram MilfsLikeItBig MomKnowsBest)
x3folder_4=(MommyGotBoobs MommysGirl Pantyhosed4U PornMegaLoad PornstarPlatinum PornStarsLikeItBig PureMature RKPrime)
x3folder_5=(ShareMyBF TeensLoveHugeCocks TeensLikeItBig TheRealWorkout TheLifeErotic VIPArea WildOnCam)

## Funktion

# Local Destination
INSTALL_DIR=/usr/share/metapl3x

#Latest release
LATEST_RELEASE=$(curl -L -s -H 'Accept: application/json' https://github.com/d43M0n23/pl3x/releases/latest)
LATEST_VERSION=$(echo $LATEST_RELEASE | sed -e 's/.*"tag_name":"\([^"]*\)".*/\1/')


#INSTALL

if [ ! -d $INSTALL_DIR ]; then
echo -e "\n${green} + -- --=[This is your first run of the metapl3x ${clear}"
echo -e "${green} + -- --=[This script will install metapl3x under $INSTALL_DIR.${clear}"
echo -e "${green} + -- --=[After install you can use the command 'metapl3x' Server/System wide and remove the downloaded git folder${clear}"

sleep 2
mkdir -p $INSTALL_DIR 2> /dev/null
cp -Rf $PWD/* $INSTALL_DIR 2> /dev/null
rm -f /usr/bin/metapl3x
ln -s $INSTALL_DIR/metapl3x /usr/bin/metapl3x
echo -e "${green} + -- --=[Installation Finish.${clear}"
sleep 2
fi



#UPDATE NEW VERSION

if [ "$LATEST_VERSION" != "$version" ]; then
echo -e "\n${red}Your Version of metapl3x is outdated!${clear}"
echo -e "\n${green}Please use the update function: metapl3x --update!${clear}"
sleep 5
fi


#UPDATE

if [ "$1"  = "--update" ]; then
echo -e "\n${yell}You have select the update Feature${clear}"
sleep 2
cd /tmp/
git clone https://github.com/d43M0n23/pl3x.git
cp -Rf pl3x/* $INSTALL_DIR 2> /dev/null
rm -f /usr/bin/metapl3x
ln -s $INSTALL_DIR/metapl3x /usr/bin/metapl3x
echo -e "\n${green}Update finish.Please restart metapl3x.${clear}"
rm -r pl3x
exit
fi


#UNINSTALL

if [ "$1" = "--uninstall" ]; then
echo -e "\n${turk}You have select the uninstall Feature${clear}"
sleep 2
rm -f /usr/bin/metapl3x
cd /usr/share/
rm -r metapl3x
cd
exit
fi


# Tools install
if ! hash exiftool 2>/dev/null; then sudo apt-get update && apt-get upgrade -y; sudo apt-get install --yes exiftool ; fi
if ! hash ffmpeg 2>/dev/null; then sudo apt-get install --yes ffmpeg ; fi

# CHECK-META
if [ "$1" = "--check" ]; then

#Variablen
owntag=core
mp4tag=mp4
mkvtag=mkv

for file in *;
do
  find "$file" -type f -not -name ".*" | grep .mp4$ | while read file
  do
        exiftool $file | grep Title
  done
done
exit
fi

# REMOVE CORE STRING
if [ "$1" = "--core" ]; then

#Variablen
owntag=core
mp4tag=mp4

for file in *;
do
  find "$file" -type f -not -name ".*" | grep .mp4$ | grep core | while read file
  do
	newfile=${file%_core.*}
	mv $file ${newfile}.${mp4tag}
        echo $file korrigiert.
  done
done
exit
fi


# Extract Audio from mkv
if [ "$1" = "--mp3" ]; then

#Variablen
owntag=core
mp4tag=mp4
mkvtag=mkv
mp3tag=mp3

for file in *;
do
  find "$file" -type f -not -name ".*" | grep .mkv$ | while read file
  do
    pfad=$(readlink -f "$file") # kpl. Pfad
        DirPath=$pfad
        DirPath="$(dirname $DirPath)"
        DirPath="$(basename $DirPath)"
        echo "$DirPath"
        newtag=${DirPath%.German*}
        newfile=${file%.*}
	# Extract MP3
	ffmpeg -i $file -vn -acodec mp3 ${newfile}.${mp3tag}
        echo Aus $file Audio extrahiert.
  done
done
exit
fi

if [ "$1" = "--create" ]; then
	echo "creating Folder in Source"
	mkdir ${x3folder_1[*]} ${x3folder_2[*]} ${x3folder_3[*]} ${x3folder_4[*]} ${x3folder_5[*]};
	exit;
fi

#Intro
echo -e "\n"
echo -e "                __                .__  ________          "
echo -e "  _____   _____/  |______  ______ |  | \_____  \___  ___ "
echo -e " /     \_/ __ \   __\__  \ \____ \|  |   _(__  <\  \/  / "
echo -e "|  Y Y  \  ___/|  |  / __ \|  |_> >  |__/       \>    <  "
echo -e "|__|_|  /\___  >__| (____  /   __/|____/______  /__/\_ \ "
echo -e "      \/     \/          \/|__|               \/      \/ "
echo -e "\n"
echo -e "${yell}Version: ${version}${clear}"
echo -e "${green}Last Stable: ${LATEST_VERSION}${clear}"
echo -e "${yell}Optionen: --check, --core, --mp3, --create\n${clear}"


#for file in *.mp4 *.mkv (Testen)
# echo ${VALUE%.*}
for file in *;
do
  find "$file" -type f -not -name ".*" | grep .mp4$ | while read file
  do
    pfad=$(readlink -f "$file") # kpl. Pfad
	DirPath=$pfad
	DirPath="$(dirname $DirPath)"
	DirPath="$(basename $DirPath)"
	echo "$DirPath"
	newtag=${DirPath%.XXX*}
	newfile=${file%.*}
	ffmpeg -i $file -c copy -metadata title="$newtag" -metadata comment="$newtag" -y ${newfile}_${owntag}.${mp4tag}
	echo $file korrigiert.
#	cp $file ${file}.bka # Absicherung
	rm $file
  done
  find "$file" -type f -not -name ".*" | grep .mp4$ | while read file
  do
        newfile=${file%_core.*}
        mv $file ${newfile}.${mp4tag}
        echo $file verschoben.
   done
done
